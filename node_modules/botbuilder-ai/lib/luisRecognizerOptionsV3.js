"use strict";
/**
 * @module botbuilder-ai
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const luisRecognizerOptions_1 = require("./luisRecognizerOptions");
const botbuilder_core_1 = require("botbuilder-core");
const fetch = require('node-fetch');
const LUIS_TRACE_TYPE = 'https://www.luis.ai/schemas/trace';
const LUIS_TRACE_NAME = 'LuisRecognizer';
const LUIS_TRACE_LABEL = 'LuisV3 Trace';
const _dateSubtypes = ["date", "daterange", "datetime", "datetimerange", "duration", "set", "time", "timerange"];
const _geographySubtypes = ["poi", "city", "countryRegion", "continet", "state"];
const MetadataKey = "$instance";
function isLuisRecognizerOptionsV3(options) {
    return (options.apiVersion && options.apiVersion === "v3");
}
exports.isLuisRecognizerOptionsV3 = isLuisRecognizerOptionsV3;
class LuisRecognizerV3 extends luisRecognizerOptions_1.LuisRecognizerInternal {
    constructor(application, options) {
        super(application);
        this.predictionOptions = Object.assign({ includeAllIntents: false, includeInstanceData: true, log: true, preferExternalEntities: true, slot: 'production', telemetryClient: new botbuilder_core_1.NullTelemetryClient(), logPersonalInformation: false, includeAPIResults: true }, options);
    }
    recognizeInternalAsync(context) {
        return __awaiter(this, void 0, void 0, function* () {
            const utterance = context.activity.text || '';
            if (!utterance.trim()) {
                // Bypass LUIS if the activity's text is null or whitespace
                return Promise.resolve({
                    text: utterance,
                    intents: { '': { score: 1 } },
                    entities: {},
                });
            }
            const uri = this.buildUrl();
            const httpOptions = this.buildRequestBody(utterance);
            const data = yield fetch(uri, httpOptions);
            const response = yield data.json();
            const result = {
                text: utterance,
                intents: getIntents(response.prediction),
                entities: extractEntitiesAndMetadata(response.prediction),
                sentiment: getSentiment(response.prediction),
                luisResult: (this.predictionOptions.includeAPIResults ? response : null)
            };
            if (this.predictionOptions.includeInstanceData) {
                result.entities[MetadataKey] = result.entities[MetadataKey] ? result.entities[MetadataKey] : {};
            }
            this.emitTraceInfo(context, response.prediction, result);
            return result;
        });
    }
    buildUrl() {
        const baseUri = this.application.endpoint || 'https://westus.api.cognitive.microsoft.com';
        let uri = `${baseUri}/luis/prediction/v3.0/apps/${this.application.applicationId}`;
        if (this.predictionOptions.version) {
            uri += `/versions/${this.predictionOptions.version}/predict`;
        }
        else {
            uri += `/slots/${this.predictionOptions.slot}/predict`;
        }
        const params = `?verbose=${this.predictionOptions.includeInstanceData}&log=${this.predictionOptions.log}&show-all-intents=${this.predictionOptions.includeAllIntents}`;
        uri += params;
        return uri;
    }
    buildRequestBody(utterance) {
        const content = {
            'query': utterance,
            'options': {
                'overridePredictions': this.predictionOptions.preferExternalEntities
            }
        };
        if (this.predictionOptions.dynamicLists) {
            content['dynamicLists'] = this.predictionOptions.dynamicLists;
        }
        if (this.predictionOptions.externalEntities) {
            content['externalEntities'] = this.predictionOptions.externalEntities;
        }
        return {
            method: 'POST',
            body: JSON.stringify(content),
            headers: {
                'Content-Type': 'application/json',
                'Ocp-Apim-Subscription-Key': this.application.endpointKey,
            }
        };
    }
    emitTraceInfo(context, luisResult, recognizerResult) {
        const traceInfo = {
            recognizerResult: recognizerResult,
            luisResult: luisResult,
            luisOptions: this.predictionOptions,
            luisModel: {
                ModelID: this.application.applicationId
            }
        };
        return context.sendActivity({
            type: 'trace',
            valueType: LUIS_TRACE_TYPE,
            name: LUIS_TRACE_NAME,
            label: LUIS_TRACE_LABEL,
            value: traceInfo
        });
    }
}
exports.LuisRecognizerV3 = LuisRecognizerV3;
function normalizeName(name) {
    return name.replace(/\.| /g, '_');
}
function getIntents(luisResult) {
    // let intents: { [name: string]: { score: number } } = {};
    const intents = {};
    if (luisResult.intents) {
        for (let intent in luisResult.intents) {
            intents[normalizeName(intent)] = { score: luisResult.intents[intent].score };
        }
    }
    return intents;
}
function normalizeEntity(entity) {
    const splitEntity = entity.split(':');
    const entityName = splitEntity[splitEntity.length - 1];
    return entityName.replace(/\.| /g, '_');
}
function mapProperties(source, inInstance) {
    let result = source;
    if (source instanceof Array) {
        let narr = [];
        for (let item of source) {
            // Check if element is geographyV2
            let isGeographyV2 = '';
            if (item['type'] && _geographySubtypes.includes(item['type'])) {
                isGeographyV2 = item['type'];
            }
            if (!inInstance && isGeographyV2) {
                let geoEntity = {};
                for (let itemProps in item) {
                    if (itemProps === 'value') {
                        geoEntity.location = item[itemProps];
                    }
                }
                geoEntity.type = isGeographyV2;
                narr.push(geoEntity);
            }
            else {
                narr.push(mapProperties(item, inInstance));
            }
        }
        result = narr;
    }
    else if (source instanceof Object && typeof source !== 'string') {
        let nobj = {};
        // Fix datetime by reverting to simple timex
        if (!inInstance && source.type && typeof source.type === 'string' && _dateSubtypes.includes(source.type)) {
            let timexs = source.values;
            let arr = [];
            if (timexs) {
                let unique = [];
                for (let elt of timexs) {
                    if (elt.timex && !unique.includes(elt.timex)) {
                        unique.push(elt.timex);
                    }
                }
                for (let timex of unique) {
                    arr.push(timex);
                }
                nobj.timex = arr;
            }
            nobj.type = source.type;
        }
        else {
            // Map or remove properties
            for (let property in source) {
                let name = normalizeEntity(property);
                let isArray = source[property] instanceof Array;
                let isString = typeof source[property] === 'string';
                let isInt = Number.isInteger(source[property]);
                let val = mapProperties(source[property], inInstance || property == MetadataKey);
                if (name == "datetime" && isArray) {
                    nobj.datetimeV1 = val;
                }
                else if (name == "datetimeV2" && isArray) {
                    nobj.datetime = val;
                }
                else if (inInstance) {
                    // Correct $instance issues
                    if (name == "length" && isInt) {
                        nobj['endIndex'] = source[name] + source.startIndex;
                    }
                    else if (!((isInt && name === "modelTypeId") ||
                        (isString && name === "role"))) {
                        nobj[name] = val;
                    }
                }
                else {
                    // Correct non-$instance values
                    if (name == "unit" && isString) {
                        nobj.units = val;
                    }
                    else {
                        nobj[name] = val;
                    }
                }
            }
        }
        result = nobj;
    }
    return result;
}
function extractEntitiesAndMetadata(prediction) {
    const entities = prediction.entities;
    return mapProperties(entities, false);
}
function getSentiment(luis) {
    let result;
    if (luis.sentiment) {
        result = {
            label: luis.sentiment.label,
            score: luis.sentiment.score
        };
    }
    return result;
}
//# sourceMappingURL=luisRecognizerOptionsV3.js.map